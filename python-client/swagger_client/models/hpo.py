# coding: utf-8

"""
    Phenopolis API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@phenopolis.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.gene import Gene  # noqa: F401,E501
from swagger_client.models.patient import Patient  # noqa: F401,E501


class HPO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'patients': 'Patient',
        'genes': 'Gene'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'patients': 'patients',
        'genes': 'genes'
    }

    def __init__(self, id=None, name=None, patients=None, genes=None):  # noqa: E501
        """HPO - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._patients = None
        self._genes = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if patients is not None:
            self.patients = patients
        if genes is not None:
            self.genes = genes

    @property
    def id(self):
        """Gets the id of this HPO.  # noqa: E501


        :return: The id of this HPO.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HPO.


        :param id: The id of this HPO.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this HPO.  # noqa: E501


        :return: The name of this HPO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HPO.


        :param name: The name of this HPO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def patients(self):
        """Gets the patients of this HPO.  # noqa: E501


        :return: The patients of this HPO.  # noqa: E501
        :rtype: Patient
        """
        return self._patients

    @patients.setter
    def patients(self, patients):
        """Sets the patients of this HPO.


        :param patients: The patients of this HPO.  # noqa: E501
        :type: Patient
        """

        self._patients = patients

    @property
    def genes(self):
        """Gets the genes of this HPO.  # noqa: E501


        :return: The genes of this HPO.  # noqa: E501
        :rtype: Gene
        """
        return self._genes

    @genes.setter
    def genes(self, genes):
        """Sets the genes of this HPO.


        :param genes: The genes of this HPO.  # noqa: E501
        :type: Gene
        """

        self._genes = genes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HPO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
