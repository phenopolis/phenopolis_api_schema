# coding: utf-8

"""
    Phenopolis API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@phenopolis.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SimpleVariant(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'gene': 'list[str]',
        'kaviar_af': 'float',
        'cadd': 'float',
        'internal_af': 'float',
        'internal_hom_f': 'float'
    }

    attribute_map = {
        'id': 'id',
        'gene': 'gene',
        'kaviar_af': 'kaviar_af',
        'cadd': 'cadd',
        'internal_af': 'internal_af',
        'internal_hom_f': 'internal_hom_f'
    }

    def __init__(self, id=None, gene=None, kaviar_af=None, cadd=None, internal_af=None, internal_hom_f=None):  # noqa: E501
        """SimpleVariant - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._gene = None
        self._kaviar_af = None
        self._cadd = None
        self._internal_af = None
        self._internal_hom_f = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if gene is not None:
            self.gene = gene
        if kaviar_af is not None:
            self.kaviar_af = kaviar_af
        if cadd is not None:
            self.cadd = cadd
        if internal_af is not None:
            self.internal_af = internal_af
        if internal_hom_f is not None:
            self.internal_hom_f = internal_hom_f

    @property
    def id(self):
        """Gets the id of this SimpleVariant.  # noqa: E501


        :return: The id of this SimpleVariant.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SimpleVariant.


        :param id: The id of this SimpleVariant.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def gene(self):
        """Gets the gene of this SimpleVariant.  # noqa: E501


        :return: The gene of this SimpleVariant.  # noqa: E501
        :rtype: list[str]
        """
        return self._gene

    @gene.setter
    def gene(self, gene):
        """Sets the gene of this SimpleVariant.


        :param gene: The gene of this SimpleVariant.  # noqa: E501
        :type: list[str]
        """

        self._gene = gene

    @property
    def kaviar_af(self):
        """Gets the kaviar_af of this SimpleVariant.  # noqa: E501


        :return: The kaviar_af of this SimpleVariant.  # noqa: E501
        :rtype: float
        """
        return self._kaviar_af

    @kaviar_af.setter
    def kaviar_af(self, kaviar_af):
        """Sets the kaviar_af of this SimpleVariant.


        :param kaviar_af: The kaviar_af of this SimpleVariant.  # noqa: E501
        :type: float
        """

        self._kaviar_af = kaviar_af

    @property
    def cadd(self):
        """Gets the cadd of this SimpleVariant.  # noqa: E501


        :return: The cadd of this SimpleVariant.  # noqa: E501
        :rtype: float
        """
        return self._cadd

    @cadd.setter
    def cadd(self, cadd):
        """Sets the cadd of this SimpleVariant.


        :param cadd: The cadd of this SimpleVariant.  # noqa: E501
        :type: float
        """

        self._cadd = cadd

    @property
    def internal_af(self):
        """Gets the internal_af of this SimpleVariant.  # noqa: E501


        :return: The internal_af of this SimpleVariant.  # noqa: E501
        :rtype: float
        """
        return self._internal_af

    @internal_af.setter
    def internal_af(self, internal_af):
        """Sets the internal_af of this SimpleVariant.


        :param internal_af: The internal_af of this SimpleVariant.  # noqa: E501
        :type: float
        """

        self._internal_af = internal_af

    @property
    def internal_hom_f(self):
        """Gets the internal_hom_f of this SimpleVariant.  # noqa: E501


        :return: The internal_hom_f of this SimpleVariant.  # noqa: E501
        :rtype: float
        """
        return self._internal_hom_f

    @internal_hom_f.setter
    def internal_hom_f(self, internal_hom_f):
        """Sets the internal_hom_f of this SimpleVariant.


        :param internal_hom_f: The internal_hom_f of this SimpleVariant.  # noqa: E501
        :type: float
        """

        self._internal_hom_f = internal_hom_f

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimpleVariant):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
